{"pages":[{"title":"About me","text":"I am siikii, a retired old man.","link":"/about/index.html"}],"posts":[{"title":"Setting Up Hexo and Deploying to GitHub Pages on Mac Mini M1","text":"I’ve decided to start a blog and document my activities there. I recalled using Hexo in the past, which is a fast, simple, and efficient blog framework that supports one-click deployment to GitHub Pages. By combining GitHub Pages with a custom domain, I’ll have a complete blog website. Below, I’ll share the process of installing and configuring Hexo on my Mac Mini M1, creating a new repo on GitHub, deploying the Hexo-generated website to the repo, and finally publishing it to GitHub Pages. 1. Installing Node.jsBefore installing Hexo, make sure Node.js is installed. If you already have Node.js installed, you can skip to step 2. On macOS, you can use Homebrew to install Node.js: 1brew install node You may also need to install npm separately because I noticed that Homebrew’s Node.js doesn’t come with npm by default: 1brew install npm Verify the Node.js version by typing node --version in the terminal. At the time of writing this blog post, the latest version installed by Homebrew is v20.5.0. 2. Installing HexoOnce Node.js is installed, you can use npm to install the Hexo package: 1npm install -g hexo-cli 3. Getting Started with the BlogAfter installing Hexo, execute the following commands to create the necessary files in the specified folder: 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install You can name the folder as the same name of the repository you plan to deploy to GitHub Pages, for example, example.github.io. 4. Configuring the SiteAfter generating the website, the first step is to configure Hexo’s _config.yml file. Open the _config.yml file and set the site’s name, URL, language, etc. Since I want my blog to have both English and Chinese content, I can set the language as language: ['en', 'zh-cn'], where en is the default. Also, find the i18n_dir setting for international language settings and set it to i18n_dir: :lang, which means using the language code directory to identify the language. So, for Chinese posts, remember to place the source files in the zh-cn directory. Next, install and specify the theme for the website. As I could only find one theme that supports multiple languages, I’m using the minos theme: theme: minos. 5. One-Click DeploymentHexo provides a quick and convenient one-click deployment feature, allowing you to deploy the website to the server with just one command: 1hexo deploy Before starting the deployment, make sure to modify the parameters in _config.yml. At a minimum, the deployment configuration should have the type parameter, for example: 12deploy: type: git Since we are using GitHub for deployment, we need to use the Git deployer. First, install it: 1npm install hexo-deployer-git --save Then, modify the _config.yml configuration: 1234deploy: type: git repo: https://github.com/example/example.github.io branch: gh-pages 6. Custom DomainAfter deployment, you can set a custom domain in GitHub Pages settings. Once set, a file named CNAME will be created in the root directory of the gh-pages branch in your repository, containing the custom domain you specified. However, this file will disappear every time you deploy with Hexo since it doesn’t exist locally. To avoid having to reset the custom domain with each deployment, you can place a CNAME file in thesource folder locally, so it will be uploaded along with the deployment each time.","link":"/2023/07/29/how-to-setup-hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Github Pages","slug":"Github-Pages","link":"/tags/Github-Pages/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"}]}